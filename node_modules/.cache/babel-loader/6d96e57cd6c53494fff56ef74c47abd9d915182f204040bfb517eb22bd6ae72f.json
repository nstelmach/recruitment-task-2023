{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stelm\\\\recruitment-task-2023\\\\src\\\\components\\\\tiles\\\\ButtonTile.tsx\";\nimport * as React from \"react\";\n// ButtonTile as ButtonTileProps used to avoid duplication of names\n\nimport \"../../styles/style.css\";\nimport { ColorMap } from \"../../constants/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ButtonTile(_ref) {\n  let {\n    elementKey,\n    text,\n    action\n  } = _ref;\n  const handleClick = () => {\n    // it is separated into two situations\n    // 1. when we want to change the background color\n    // 2. when we have to change image src\n\n    if (action.value.source) {\n      // as HTMLImageElement because src does not exist on HTMLElement\n      const element = document.getElementById(action.referenceElementKey);\n      if (element) {\n        element.src = action.value.source;\n      }\n    } else if (action.value.color) {\n      const element = document.getElementById(action.referenceElementKey);\n      if (element) {\n        // color change using colors map\n        element.style.backgroundColor = ColorMap[action.value.color];\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    className: \"button\",\n    id: elementKey,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_c = ButtonTile;\nvar _c;\n$RefreshReg$(_c, \"ButtonTile\");","map":{"version":3,"names":["React","ColorMap","jsxDEV","_jsxDEV","ButtonTile","_ref","elementKey","text","action","handleClick","value","source","element","document","getElementById","referenceElementKey","src","color","style","backgroundColor","onClick","className","id","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/stelm/recruitment-task-2023/src/components/tiles/ButtonTile.tsx"],"sourcesContent":["import * as React from \"react\";\r\n// ButtonTile as ButtonTileProps used to avoid duplication of names\r\nimport { ButtonTile as ButtonTileProps } from \"../../types/model\";\r\nimport \"../../styles/style.css\";\r\nimport { ColorMap } from \"../../constants/constants\";\r\n\r\nexport default function ButtonTile({\r\n  elementKey,\r\n  text,\r\n  action,\r\n}: ButtonTileProps) {\r\n  const handleClick = () => {\r\n    // it is separated into two situations\r\n    // 1. when we want to change the background color\r\n    // 2. when we have to change image src\r\n\r\n    if (action.value.source) {\r\n      // as HTMLImageElement because src does not exist on HTMLElement\r\n      const element = document.getElementById(\r\n        action.referenceElementKey\r\n      ) as HTMLImageElement | null;\r\n      if (element) {\r\n        element.src = action.value.source;\r\n      }\r\n    } else if (action.value.color) {\r\n      const element = document.getElementById(action.referenceElementKey);\r\n      if (element) {\r\n        // color change using colors map\r\n        element.style.backgroundColor = ColorMap[action.value.color];\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button onClick={handleClick} className=\"button\" id={elementKey}>\r\n      {text}\r\n    </button>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B;;AAEA,OAAO,wBAAwB;AAC/B,SAASC,QAAQ,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,eAAe,SAASC,UAAUA,CAAAC,IAAA,EAId;EAAA,IAJe;IACjCC,UAAU;IACVC,IAAI;IACJC;EACe,CAAC,GAAAH,IAAA;EAChB,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA;IACA;;IAEA,IAAID,MAAM,CAACE,KAAK,CAACC,MAAM,EAAE;MACvB;MACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAc,CACrCN,MAAM,CAACO,mBAAmB,CACA;MAC5B,IAAIH,OAAO,EAAE;QACXA,OAAO,CAACI,GAAG,GAAGR,MAAM,CAACE,KAAK,CAACC,MAAM;MACnC;IACF,CAAC,MAAM,IAAIH,MAAM,CAACE,KAAK,CAACO,KAAK,EAAE;MAC7B,MAAML,OAAO,GAAGC,QAAQ,CAACC,cAAc,CAACN,MAAM,CAACO,mBAAmB,CAAC;MACnE,IAAIH,OAAO,EAAE;QACX;QACAA,OAAO,CAACM,KAAK,CAACC,eAAe,GAAGlB,QAAQ,CAACO,MAAM,CAACE,KAAK,CAACO,KAAK,CAAC;MAC9D;IACF;EACF,CAAC;EAED,oBACEd,OAAA;IAAQiB,OAAO,EAAEX,WAAY;IAACY,SAAS,EAAC,QAAQ;IAACC,EAAE,EAAEhB,UAAW;IAAAiB,QAAA,EAC7DhB;EAAI;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEb;AAACC,EAAA,GAhCuBxB,UAAU;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}